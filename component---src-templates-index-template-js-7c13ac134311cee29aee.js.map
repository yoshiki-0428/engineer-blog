{"version":3,"sources":["webpack:///./src/components/Feed/index.js","webpack:///./src/components/Pagination/index.js","webpack:///./src/templates/index-template.js","webpack:///./src/components/Page/index.js"],"names":["Feed","edges","map","edge","key","node","fields","slug","dateTime","format","Date","frontmatter","date","YYYY_MM_DD","updatedDate","to","title","categorySlug","category","size","item","socialImage","excerpt","tags","t","fieldValue","urlPrefix","Index","prevPagePath","nextPagePath","hasNextPage","hasPrevPage","Button","rel","PAGINATION","PREV_PAGE","NEXT_PAGE","query","IndexTemplate","data","pageContext","useSiteMetadata","siteTitle","siteSubtitle","subtitle","socialMediaCard","currentPage","allMarkdownRemark","pageTitle","mainPage","Page","content","Pagination","side","Sidebar","Layout","main","image","description","top","footerContent","Body"],"mappings":"6FAAA,6GAyDeA,IA3CF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACP,uBACGA,EAAMC,KAAI,SAACC,GAAD,OACP,YAAC,IAAD,CAAMC,IAAKD,EAAKE,KAAKC,OAAOC,MAC1B,YAAC,IAAD,KACE,YAAC,IAAD,KACE,oBAAMC,SAAUC,YAAO,IAAIC,KAAKP,EAAKE,KAAKM,YAAYC,MAAOC,MAC1DJ,YAAO,IAAIC,KAAKP,EAAKE,KAAKM,YAAYC,MAAOC,MAE/CV,EAAKE,KAAKM,YAAYG,aACnB,uCACE,oBACEN,SACEC,YAAO,IAAIC,KAAKP,EAAKE,KAAKM,YAAYG,aAAcD,MACrDJ,YAAO,IAAIC,KAAKP,EAAKE,KAAKM,YAAYG,aAAcD,MAJzD,MAUN,YAAC,IAAD,CAAqBE,GAAIZ,EAAKE,KAAKC,OAAOC,MACvCJ,EAAKE,KAAKM,YAAYK,OAGzB,YAAC,IAAD,CAAkBD,GAAIZ,EAAKE,KAAKC,OAAOW,cACpCd,EAAKE,KAAKM,YAAYO,WAG3B,YAAC,OAAD,CAAMH,GAAIZ,EAAKE,KAAKC,OAAOC,MACzB,YAAC,IAAD,CACIY,KAAM,SACNC,KAAM,CAAEC,YAAalB,EAAKE,KAAKM,YAAYU,gBAEjD,YAAC,IAAD,KACE,YAAC,IAAD,KAAmBlB,EAAKE,KAAKiB,SAC7B,YAAC,IAAD,CAAeP,GAAIZ,EAAKE,KAAKC,OAAOC,MAApC,aACA,YAAC,IAAD,CAAMgB,KAAMpB,EAAKE,KAAKM,YAAYY,KAAKrB,KAAI,SAACsB,GAAD,MAAQ,CAAEC,WAAYD,MAAOE,UAAW,iB,mfCbpFC,EAhCD,SAAC,GAKR,IAJLC,EAII,EAJJA,aACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,YACAC,EACI,EADJA,YAEMC,EAAM,2RAEZ,OACE,0BACE,0BACGD,GACG,YAAC,OAAD,CAAME,IAAI,OAAOlB,GAAIgB,EAAcH,EAAe,KAChD,YAACI,EAAD,KACGE,IAAWC,aAKtB,0BACGL,GACG,YAAC,OAAD,CAAMG,IAAI,OAAOlB,GAAIe,EAAcD,EAAe,KAChD,YAACG,EAAD,KACGE,IAAWE,eCoBfC,EAAK,aAkCHC,UAzEO,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAAkB,EACuBC,cAAvDC,EADgC,EACvC1B,MAA4B2B,EADW,EACrBC,SAAwBC,EADH,EACGA,gBAGhDC,EAKEN,EALFM,YACAhB,EAIEU,EAJFV,YACAC,EAGES,EAHFT,YACAH,EAEEY,EAFFZ,aACAC,EACEW,EADFX,aAGM5B,EAAUsC,EAAKQ,kBAAf9C,MACF+C,EAAYF,EAAc,EAAd,gBAAkCA,EAAlC,MAAmDJ,EAAcA,EAE7EO,EACJ,YAACC,EAAA,EAAD,CAAMC,QACJ,uBACE,YAACnD,EAAA,EAAD,CAAMC,MAAOA,IACb,YAACmD,EAAD,CACExB,aAAcA,EACdC,aAAcA,EACdE,YAAaA,EACbD,YAAaA,OAMfuB,EAAO,YAACC,EAAA,EAAD,MAEb,OACE,YAACC,EAAA,EAAD,CAAQC,KAAMP,EACN5B,YAAawB,EAAgBY,MAC7BJ,KAAMA,EACNrC,MAAOgC,EACPU,YAAaf,EAAcgB,KAAG,M,+FCnB3BT,IArBF,SAAC,GAAuC,IAArClC,EAAoC,EAApCA,MAAOmC,EAA6B,EAA7BA,QAASS,EAAoB,EAApBA,cACxBC,EAAI,sHACV,OACI,8BACG7C,GACC,8BACE,YAAC,IAAD,KAAWA,GACX,YAAC,IAAD,OAIJ,YAAC6C,EAAD,KACGV,GAEH,uBACGS","file":"component---src-templates-index-template-js-7c13ac134311cee29aee.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport { format } from 'date-fns';\nimport Tags from '../Tags';\nimport ImageWrap from '../Image/ImageWrap';\nimport {\n  BUTTON_CENTER, CARD,\n  SPACER,\n  TEXT_BASE_CENTER,\n  TEXT_GATSBY_LINK,\n  TEXT_GATSBY_LINK_H1,\n} from '../Tailwind';\nimport { YYYY_MM_DD } from '../../constants/dateFormat';\n\nconst Feed = ({ edges }) => (\n      <div>\n        {edges.map((edge) => (\n            <CARD key={edge.node.fields.slug}>\n              <SPACER>\n                <TEXT_BASE_CENTER>\n                  <time dateTime={format(new Date(edge.node.frontmatter.date), YYYY_MM_DD)}>\n                    {format(new Date(edge.node.frontmatter.date), YYYY_MM_DD)}\n                  </time>\n                  {edge.node.frontmatter.updatedDate && (\n                      <> (更新日:\n                        <time\n                          dateTime={\n                            format(new Date(edge.node.frontmatter.updatedDate), YYYY_MM_DD)}>\n                          {format(new Date(edge.node.frontmatter.updatedDate), YYYY_MM_DD)}\n                        </time>\n                        )\n                      </>\n                  )}\n                </TEXT_BASE_CENTER>\n                <TEXT_GATSBY_LINK_H1 to={edge.node.fields.slug}>\n                  {edge.node.frontmatter.title}\n                </TEXT_GATSBY_LINK_H1>\n\n                <TEXT_GATSBY_LINK to={edge.node.fields.categorySlug}>\n                  {edge.node.frontmatter.category}\n                </TEXT_GATSBY_LINK>\n              </SPACER>\n              <Link to={edge.node.fields.slug}>\n                <ImageWrap\n                    size={'normal'}\n                    item={{ socialImage: edge.node.frontmatter.socialImage }} />\n              </Link>\n              <SPACER>\n                <TEXT_BASE_CENTER>{edge.node.excerpt}</TEXT_BASE_CENTER>\n                <BUTTON_CENTER to={edge.node.fields.slug}>READ MORE</BUTTON_CENTER>\n                <Tags tags={edge.node.frontmatter.tags.map((t) => ({ fieldValue: t }))} urlPrefix={'tags'}/>\n              </SPACER>\n            </CARD>\n        ))}\n      </div>\n);\n\nexport default Feed;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport tw from 'twin.macro';\nimport { PAGINATION } from '../../constants';\n\nconst Index = ({\n  prevPagePath,\n  nextPagePath,\n  hasNextPage,\n  hasPrevPage\n}) => {\n  const Button = tw.button`bg-transparent py-2 px-4 border border-base-gray rounded`;\n\n  return (\n    <div tw=\"mt-2 flex\">\n      <div tw=\"w-1/2 text-left text-base-font\">\n        {hasPrevPage && (\n            <Link rel=\"prev\" to={hasPrevPage ? prevPagePath : '/'}>\n              <Button>\n                {PAGINATION.PREV_PAGE}\n              </Button>\n            </Link>\n        )}\n      </div>\n      <div tw=\"w-1/2 text-right text-base-font\">\n        {hasNextPage && (\n            <Link rel=\"prev\" to={hasNextPage ? nextPagePath : '/'}>\n              <Button>\n                {PAGINATION.NEXT_PAGE}\n              </Button>\n            </Link>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Index;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { useSiteMetadata } from '../hooks';\nimport Layout from '../components/Layout';\nimport Sidebar from '../components/Sidebar';\nimport Feed from '../components/Feed';\nimport Page from '../components/Page';\nimport Pagination from '../components/Pagination';\n\nconst IndexTemplate = ({ data, pageContext }) => {\n  const { title: siteTitle, subtitle: siteSubtitle, socialMediaCard } = useSiteMetadata();\n\n  const {\n    currentPage,\n    hasNextPage,\n    hasPrevPage,\n    prevPagePath,\n    nextPagePath\n  } = pageContext;\n\n  const { edges } = data.allMarkdownRemark;\n  const pageTitle = currentPage > 0 ? `Posts - Page ${currentPage} - ${siteTitle}` : siteTitle;\n\n  const mainPage = (\n    <Page content={\n      <div>\n        <Feed edges={edges} />\n        <Pagination\n          prevPagePath={prevPagePath}\n          nextPagePath={nextPagePath}\n          hasPrevPage={hasPrevPage}\n          hasNextPage={hasNextPage}\n        />\n      </div>\n    }/>\n  );\n\n  const side = <Sidebar />;\n\n  return (\n    <Layout main={mainPage}\n            socialImage={socialMediaCard.image}\n            side={side}\n            title={pageTitle}\n            description={siteSubtitle} top/>\n  );\n};\n\nexport const query = graphql`\n  query IndexTemplate($postsLimit: Int!, $postsOffset: Int!) {\n    allMarkdownRemark(\n        limit: $postsLimit,\n        skip: $postsOffset,\n        filter: { frontmatter: { template: { eq: \"post\" }, draft: { ne: true } } },\n        sort: { order: DESC, fields: [frontmatter___date] }\n      ){\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n      edges {\n        node {\n          fields {\n            slug\n            categorySlug\n          }\n          frontmatter {\n            title\n            date\n            updatedDate\n            category\n            socialImage\n            tags\n          }\n          excerpt(truncate: true)\n        }\n      }\n    }\n    \n  }\n`;\n\nexport default IndexTemplate;\n","import React from 'react';\nimport tw from 'twin.macro';\nimport { HR, TITLE_H1 } from '../Tailwind';\n\nconst Page = ({ title, content, footerContent }) => {\n  const Body = tw.div`text-base flex justify-center`;\n  return (\n      <>\n        {title && (\n          <>\n            <TITLE_H1>{title}</TITLE_H1>\n            <HR/>\n          </>\n        )}\n\n        <Body>\n          {content}\n        </Body>\n        <div>\n          {footerContent}\n        </div>\n      </>\n  );\n};\n\nexport default Page;\n"],"sourceRoot":""}