{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/spring-cloud-gateway-explain","result":{"data":{"markdownRemark":{"id":"d73c04b8-50d3-5f77-bfb6-e469e982b0bb","html":"<h1 id=\"spring-cloud-gatewayとは？\" style=\"position:relative;\"><a href=\"#spring-cloud-gateway%E3%81%A8%E3%81%AF%EF%BC%9F\" aria-label=\"spring cloud gatewayとは？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Cloud Gatewayとは？</h1>\n<p>一言でいうと<strong>「マイクロサービス向けのOAuth2認証API基盤」</strong>になります。</p>\n<p><a href=\"https://spring.pleiades.io/projects/spring-cloud-gateway\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">公式</a>が親切に日本語で解説してるので見てみましょう。</p>\n<blockquote>\n<p>このプロジェクトは、Spring MVC の上に API Gateway を構築するためのライブラリを提供します。Spring Cloud Gateway は、API にルーティングするためのシンプルでありながら効果的な方法を提供し、セキュリティ、モニタリング / メトリック、復元力などの横断的な懸念を API に提供することを目的としています。</p>\n</blockquote>\n<h2 id=\"つまり？\" style=\"position:relative;\"><a href=\"#%E3%81%A4%E3%81%BE%E3%82%8A%EF%BC%9F\" aria-label=\"つまり？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>つまり？</h2>\n<p>マイクロサービス間などでOAuth2などの認証問題を解決してくれるフレームワークになります。アプリ間のルーティングもしてくれるので認証機能を備えたAPI上のプロキシーのような存在になります。</p>\n<h1 id=\"アーキテクチャ\" style=\"position:relative;\"><a href=\"#%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3\" aria-label=\"アーキテクチャ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>アーキテクチャ</h1>\n<p>それぞれの役割をわかりやすくするため図で見てみましょう。</p>\n<h2 id=\"全体的なアーキテクチャ図\" style=\"position:relative;\"><a href=\"#%E5%85%A8%E4%BD%93%E7%9A%84%E3%81%AA%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E5%9B%B3\" aria-label=\"全体的なアーキテクチャ図 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>全体的なアーキテクチャ図</h2>\n<p><img src=\"https://img.esa.io/uploads/production/attachments/15569/2020/10/14/84487/69b4700a-b08f-4d0a-984a-1029ede21291.png\"></p>\n<p>仮にVue.jsなどのFront AppからGatewayのURLにアクセスするとCognito（AWSの場合）などのIDMとOAuth2認証を行い、指定のResource APIと通信ができるようになります。</p>\n<p>後述しますが、<strong>Front to Gateway間はSessionで状態管理</strong>されており、<strong>Gateway to API間はJWTの形式で認証のやり取り</strong>がされます。</p>\n<p>なのでAPI側はJWTの認証チェックだけ行えばOKということになります。（APIはSpringがBetterではあるが別言語でもSo Good）</p>\n<h2 id=\"workshop\" style=\"position:relative;\"><a href=\"#workshop\" aria-label=\"workshop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Workshop</h2>\n<p>この記事でWorkshopを作ってもよいのですが、大変長くなるので認証サーバのUAAを使用したこちらのRepositoryを進めると理解が深まると思います。</p>\n<ul>\n<li><a href=\"https://spring.pleiades.io/guides/gs/gateway/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://spring.pleiades.io/guides/gs/gateway/</a></li>\n<li><a href=\"https://github.com/spring-cloud-samples/sample-gateway-oauth2login\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/spring-cloud-samples/sample-gateway-oauth2login</a></li>\n</ul>\n<h1 id=\"認証の手順\" style=\"position:relative;\"><a href=\"#%E8%AA%8D%E8%A8%BC%E3%81%AE%E6%89%8B%E9%A0%86\" aria-label=\"認証の手順 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>認証の手順</h1>\n<p><img src=\"https://img.esa.io/uploads/production/attachments/15569/2020/10/14/84487/d5986ad7-614b-4b1b-b230-15388601b827.png\"></p>\n<h1 id=\"導入する目的・メリット\" style=\"position:relative;\"><a href=\"#%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B%E7%9B%AE%E7%9A%84%E3%83%BB%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88\" aria-label=\"導入する目的・メリット permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>導入する目的・メリット</h1>\n<ul>\n<li>Front, BFFにAccessTokenを持たせないための設計ができる</li>\n<li>OAuth2の複雑な認証フローを自分で開発したくない</li>\n<li>認証に必要な設定情報を埋め込むだけで認証を行う役割をもつ</li>\n<li>認証部分が独立しているため他言語APIと連携も容易なのでマイクロサービスアーキテクチャの認証部分として適している。</li>\n<li>再利用が可能！！！</li>\n</ul>\n<h2 id=\"ちなみに\" style=\"position:relative;\"><a href=\"#%E3%81%A1%E3%81%AA%E3%81%BF%E3%81%AB\" aria-label=\"ちなみに permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ちなみに</h2>\n<p>マイクロサービス関係なくAPI内に認証を入れる場合であれば、<a href=\"https://qiita.com/yushi_koga/items/da707686d2051fd5ece4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring OAuth2 Client</a>を設定しても良い</p>\n<h1 id=\"デメリット。。。\" style=\"position:relative;\"><a href=\"#%E3%83%87%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88%E3%80%82%E3%80%82%E3%80%82\" aria-label=\"デメリット。。。 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>デメリット。。。</h1>\n<p>Spring Cloud GatewayというよりSpring 5のWebFluxの問題かもしれませんが、NettyというWebサーバ上でConnectionが切れる問題が多発したり（<a href=\"https://tech-blog.yoshikiohashi.dev/posts/reactor-netty-spring\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">こちらの記事で解説</a>）、RefreshTokenの自動更新処理などは自分で入れる必要があります。</p>\n<p>つまり、既存のISSUEがあり既存問題に対して自分たちの力で解消できるどうかが導入のキーになると思います。</p>\n<h1 id=\"認証の仕組み\" style=\"position:relative;\"><a href=\"#%E8%AA%8D%E8%A8%BC%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF\" aria-label=\"認証の仕組み permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>認証の仕組み</h1>\n<p>わかりやすく図化してみました。一般的にFrontにJWTを直接持つとセキュリティ的にグレー（？）なのでSessionを保持してクレデンシャル情報をサーバ内に内包しているためかなりセキュアであると言えます。</p>\n<p><img src=\"https://img.esa.io/uploads/production/attachments/15569/2020/10/14/84487/8336b3b0-a679-4f41-9418-1ec8ca47bd85.png\"></p>\n<blockquote>\n<p>今回はCognito User Poolを使用していると仮定しているためAWS Resourceと疎通しています</p>\n</blockquote>\n<h2 id=\"アクセストークンの自動更新処理はしてくれないの？\" style=\"position:relative;\"><a href=\"#%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%83%88%E3%83%BC%E3%82%AF%E3%83%B3%E3%81%AE%E8%87%AA%E5%8B%95%E6%9B%B4%E6%96%B0%E5%87%A6%E7%90%86%E3%81%AF%E3%81%97%E3%81%A6%E3%81%8F%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%EF%BC%9F\" aria-label=\"アクセストークンの自動更新処理はしてくれないの？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>アクセストークンの自動更新処理はしてくれないの？</h2>\n<p>Spring Cloud GatewayのFilter機能により実現できます。通信間に処理を入れ込むことができる。HTTP通信の際に有効期限を確認し、切れていれば更新を行う処理を入れることができます。</p>\n<p><a href=\"https://github.com/spring-cloud/spring-cloud-security/issues/175#issuecomment-557135243\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">該当ISSUE</a></p>\n<p>すでにCloseしてるので標準搭載されるかもしれません。</p>\n<p>コードだとこんな感じ</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ReactiveOAuth2AuthorizedClientManager</span> <span class=\"token function\">createDefaultAuthorizedClientManager</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">ReactiveClientRegistrationRepository</span> clientRegistrationRepository<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">ServerOAuth2AuthorizedClientRepository</span> authorizedClientRepository<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">ReactiveOAuth2AuthorizedClientProvider</span> authorizedClientProvider <span class=\"token operator\">=</span>\n                <span class=\"token class-name\">ReactiveOAuth2AuthorizedClientProviderBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">authorizationCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">refreshToken</span><span class=\"token punctuation\">(</span>configurer <span class=\"token operator\">-></span> configurer<span class=\"token punctuation\">.</span><span class=\"token function\">clockSkew</span><span class=\"token punctuation\">(</span>accessTokenExpiresSkew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">clientCredentials</span><span class=\"token punctuation\">(</span>configurer <span class=\"token operator\">-></span> configurer<span class=\"token punctuation\">.</span><span class=\"token function\">clockSkew</span><span class=\"token punctuation\">(</span>accessTokenExpiresSkew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span>configurer <span class=\"token operator\">-></span> configurer<span class=\"token punctuation\">.</span><span class=\"token function\">clockSkew</span><span class=\"token punctuation\">(</span>accessTokenExpiresSkew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">DefaultReactiveOAuth2AuthorizedClientManager</span> authorizedClientManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultReactiveOAuth2AuthorizedClientManager</span><span class=\"token punctuation\">(</span>\n                clientRegistrationRepository<span class=\"token punctuation\">,</span> authorizedClientRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        authorizedClientManager<span class=\"token punctuation\">.</span><span class=\"token function\">setAuthorizedClientProvider</span><span class=\"token punctuation\">(</span>authorizedClientProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> authorizedClientManager<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">GatewayFilter</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">GatewayFilter</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">,</span> chain<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getPrincipal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// .log(\"token-relay-filter\")</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>principal <span class=\"token operator\">-></span> principal <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">OAuth2AuthenticationToken</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">cast</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OAuth2AuthenticationToken</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">::</span><span class=\"token function\">authorizeClient</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OAuth2AuthorizedClient</span><span class=\"token operator\">::</span><span class=\"token function\">getAccessToken</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>token <span class=\"token operator\">-></span> <span class=\"token function\">withBearerAuth</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// TODO: adjustable behavior if empty</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">defaultIfEmpty</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>chain<span class=\"token operator\">::</span><span class=\"token function\">filter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ServerWebExchange</span> <span class=\"token function\">withBearerAuth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">,</span> <span class=\"token class-name\">OAuth2AccessToken</span> accessToken<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">-></span> r<span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span>headers <span class=\"token operator\">-></span> headers<span class=\"token punctuation\">.</span><span class=\"token function\">setBearerAuth</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token punctuation\">.</span><span class=\"token function\">getTokenValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OAuth2AuthorizedClient</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">authorizeClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OAuth2AuthenticationToken</span> oAuth2AuthenticationToken<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> clientRegistrationId <span class=\"token operator\">=</span> oAuth2AuthenticationToken<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthorizedClientRegistrationId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">defer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> authorizedClientManager<span class=\"token punctuation\">.</span><span class=\"token function\">authorize</span><span class=\"token punctuation\">(</span><span class=\"token function\">createOAuth2AuthorizeRequest</span><span class=\"token punctuation\">(</span>clientRegistrationId<span class=\"token punctuation\">,</span> oAuth2AuthenticationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OAuth2AuthorizeRequest</span> <span class=\"token function\">createOAuth2AuthorizeRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> clientRegistrationId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Authentication</span> principal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">OAuth2AuthorizeRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">withClientRegistrationId</span><span class=\"token punctuation\">(</span>clientRegistrationId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">principal</span><span class=\"token punctuation\">(</span>principal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>どうでも良いけどMonoとかFluxの非同期処理難しいよね。</p>\n</blockquote>\n<h1 id=\"spring-cloud-gatewayの使い方\" style=\"position:relative;\"><a href=\"#spring-cloud-gateway%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9\" aria-label=\"spring cloud gatewayの使い方 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Cloud Gatewayの使い方</h1>\n<p>基本的に<strong>引数ゲー</strong>です。こんな感じで設定すれば後々docker-composeファイルにも適用できます。</p>\n<div class=\"iframely-embed\"><div class=\"iframely-responsive\" style=\"padding-bottom: 56.2493%;\"><a href=\"https://gist.github.com/yoshiki-0428/6bd354f6cbedf78bd8fb63a41642b2b8\" data-iframely-url=\"//cdn.iframe.ly/api/iframe?url=https%3A%2F%2Fgist.github.com%2Fyoshiki-0428%2F6bd354f6cbedf78bd8fb63a41642b2b8&amp;key=4672f5d28011347a2549354aa5d0123d\"></a></div></div><script async src=\"//cdn.iframe.ly/embed.js\" charset=\"utf-8\"></script>\n<p>これの何が言いたいかというと基本的に一度作ってしまえば、別のプロジェクトで別の認証サーバと通信したいなんてときに引数を変えるだけで対応できてしまうので、アプリのための認証APIが再利用できてしまいます。</p>\n<h2 id=\"docker-composeはこんなかんじ\" style=\"position:relative;\"><a href=\"#docker-compose%E3%81%AF%E3%81%93%E3%82%93%E3%81%AA%E3%81%8B%E3%82%93%E3%81%98\" aria-label=\"docker composeはこんなかんじ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>docker-composeはこんなかんじ</h2>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">  <span class=\"token key atrule\">spring-cloud-gateway-service</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> ./spring<span class=\"token punctuation\">-</span>cloud<span class=\"token punctuation\">-</span>gateway\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> barathece91/gateway<span class=\"token punctuation\">-</span>service<span class=\"token punctuation\">-</span>k8s\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9500:9500\"</span>\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span> \n      <span class=\"token punctuation\">-</span> jio<span class=\"token punctuation\">-</span>microservice\n      <span class=\"token punctuation\">-</span> airtel<span class=\"token punctuation\">-</span>microservice\n      <span class=\"token punctuation\">-</span> vodaphone<span class=\"token punctuation\">-</span>microservice\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">SPRING_PROFILES_ACTIVE</span><span class=\"token punctuation\">:</span> path\n      SPRING_CLOUD_GATEWAY_ROUTES<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>_URI<span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//jio<span class=\"token punctuation\">-</span>microservice<span class=\"token punctuation\">:</span><span class=\"token number\">9501</span>\n      SPRING_CLOUD_GATEWAY_ROUTES<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>_ID<span class=\"token punctuation\">:</span> jio<span class=\"token punctuation\">-</span>service\n      SPRING_CLOUD_GATEWAY_ROUTES<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>_PREDICATES<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Path= /jio/*\n      SPRING_CLOUD_GATEWAY_ROUTES<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>_FILTERS<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> StripPrefix=1\n      SPRING_CLOUD_GATEWAY_ROUTES<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>_URI<span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//airtel<span class=\"token punctuation\">-</span>microservice<span class=\"token punctuation\">:</span><span class=\"token number\">9502</span>\n      SPRING_CLOUD_GATEWAY_ROUTES<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>_ID<span class=\"token punctuation\">:</span> airtel<span class=\"token punctuation\">-</span>service\n      SPRING_CLOUD_GATEWAY_ROUTES<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>_PREDICATES<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Path= /airtel/*\n      SPRING_CLOUD_GATEWAY_ROUTES<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>_FILTERS<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> StripPrefix=1\n      SPRING_CLOUD_GATEWAY_ROUTES<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>_URI<span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//vodaphone<span class=\"token punctuation\">-</span>microservice<span class=\"token punctuation\">:</span><span class=\"token number\">9503</span>\n      SPRING_CLOUD_GATEWAY_ROUTES<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>_ID<span class=\"token punctuation\">:</span> vodaphone<span class=\"token punctuation\">-</span>service\n      SPRING_CLOUD_GATEWAY_ROUTES<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>_PREDICATES<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Path= /vodaphone/*\n      SPRING_CLOUD_GATEWAY_ROUTES<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>_FILTERS<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> StripPrefix=1</code></pre></div>\n<p><a href=\"https://github.com/BarathArivazhagan/spring-cloud-gateway-routing/blob/master/docker-compose.yml#L38-L50\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sampleソースはこちら</a></p>\n<h2 id=\"kubenetes\" style=\"position:relative;\"><a href=\"#kubenetes\" aria-label=\"kubenetes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>kubenetes</h2>\n<blockquote>\n<p>kubenetesワカラナイ…以下のサンプルをどうぞ。</p>\n</blockquote>\n<p><a href=\"https://github.com/spring-cloud/spring-cloud-kubernetes/tree/master/spring-cloud-kubernetes-examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/spring-cloud/spring-cloud-kubernetes/tree/master/spring-cloud-kubernetes-examples</a></p>\n<h1 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h1>\n<p>いかがでしたでしょうか？</p>\n<p>AWS AmplifyのようにローカルストレージにJWTを保持するやり方も散見されますが一番確実なのはSession内にトークンを隠してあげることでさらにセキュアなアーキテクトになると思います。</p>\n<p>スタートアップ的なセキュリティを（あまり）重要視しないアプリであれば最初は不要ですが、BtoBのようなお堅いシステムを構築するのであれば、Spring Cloud Gatewayは向いているアーキテクトだと思います。</p>\n<p>結局は用途に応じて最善なモノを選ぶことが必要になってくるので用法容量を守って正しくお使いください。</p>\n<p>それでは良い認証ライフを！</p>\n<h1 id=\"関連資料\" style=\"position:relative;\"><a href=\"#%E9%96%A2%E9%80%A3%E8%B3%87%E6%96%99\" aria-label=\"関連資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>関連資料</h1>\n<ul>\n<li><a href=\"https://spring.pleiades.io/projects/spring-cloud-gateway\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring Cloud Gatewayとは</a></li>\n<li><a href=\"https://github.com/spring-cloud/spring-cloud-gateway\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub OSS</a></li>\n<li><a href=\"https://qiita.com/Yoghurt/items/148fd3cd7fcdf002b933#%E7%94%B0%E7%94%BA%E9%A7%85%E3%81%B8%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Qiita</a></li>\n</ul>\n<p>最後に他に聞いてみたいことがある、こんなユースケースはどうしたらいいか、など質問があれば是非コメントよりお寄せください。</p>","fields":{"slug":"/posts/spring-cloud-gateway-explain","tagSlugs":["/tags/spring/","/tags/o-auth-2/","/tags/認証処理/","/tags/java/"]},"frontmatter":{"date":"2020-10-14T09:00:00.000Z","updatedDate":"2020-10-23T09:00:00.000Z","tags":["Spring","OAuth2","認証処理","Java"],"title":"まだ認証で疲弊してるの？マイクロサービス時代のSpring Cloud Gatewayを徹底解説してみる","socialImage":"https://ucarecdn.com/c888768a-1a82-40ed-8e22-90ba29c5e962/","category":"Programming"},"excerpt":"Spring Cloud Gatewayとは？ 一言でいうと「マイクロサービス向けのOAuth2認証API基盤」になります。 公式が親切に日本語で解説してるので見てみましょう。 このプロジェクトは、Spring MVC の上に API Gateway を構築するためのライブラリ…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/posts/spring-cloud-gateway-explain/#spring-cloud-gateway%E3%81%A8%E3%81%AF%EF%BC%9F\">Spring Cloud Gatewayとは？</a></p>\n<ul>\n<li><a href=\"/posts/spring-cloud-gateway-explain/#%E3%81%A4%E3%81%BE%E3%82%8A%EF%BC%9F\">つまり？</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/posts/spring-cloud-gateway-explain/#%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3\">アーキテクチャ</a></p>\n<ul>\n<li><a href=\"/posts/spring-cloud-gateway-explain/#%E5%85%A8%E4%BD%93%E7%9A%84%E3%81%AA%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E5%9B%B3\">全体的なアーキテクチャ図</a></li>\n<li><a href=\"/posts/spring-cloud-gateway-explain/#workshop\">Workshop</a></li>\n</ul>\n</li>\n<li><a href=\"/posts/spring-cloud-gateway-explain/#%E8%AA%8D%E8%A8%BC%E3%81%AE%E6%89%8B%E9%A0%86\">認証の手順</a></li>\n<li>\n<p><a href=\"/posts/spring-cloud-gateway-explain/#%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B%E7%9B%AE%E7%9A%84%E3%83%BB%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88\">導入する目的・メリット</a></p>\n<ul>\n<li><a href=\"/posts/spring-cloud-gateway-explain/#%E3%81%A1%E3%81%AA%E3%81%BF%E3%81%AB\">ちなみに</a></li>\n</ul>\n</li>\n<li><a href=\"/posts/spring-cloud-gateway-explain/#%E3%83%87%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88%E3%80%82%E3%80%82%E3%80%82\">デメリット。。。</a></li>\n<li>\n<p><a href=\"/posts/spring-cloud-gateway-explain/#%E8%AA%8D%E8%A8%BC%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF\">認証の仕組み</a></p>\n<ul>\n<li><a href=\"/posts/spring-cloud-gateway-explain/#%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%83%88%E3%83%BC%E3%82%AF%E3%83%B3%E3%81%AE%E8%87%AA%E5%8B%95%E6%9B%B4%E6%96%B0%E5%87%A6%E7%90%86%E3%81%AF%E3%81%97%E3%81%A6%E3%81%8F%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%EF%BC%9F\">アクセストークンの自動更新処理はしてくれないの？</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/posts/spring-cloud-gateway-explain/#spring-cloud-gateway%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9\">Spring Cloud Gatewayの使い方</a></p>\n<ul>\n<li><a href=\"/posts/spring-cloud-gateway-explain/#docker-compose%E3%81%AF%E3%81%93%E3%82%93%E3%81%AA%E3%81%8B%E3%82%93%E3%81%98\">docker-composeはこんなかんじ</a></li>\n<li><a href=\"/posts/spring-cloud-gateway-explain/#kubenetes\">kubenetes</a></li>\n</ul>\n</li>\n<li><a href=\"/posts/spring-cloud-gateway-explain/#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n<li><a href=\"/posts/spring-cloud-gateway-explain/#%E9%96%A2%E9%80%A3%E8%B3%87%E6%96%99\">関連資料</a></li>\n</ul>"}},"pageContext":{"slug":"/posts/spring-cloud-gateway-explain"}},"staticQueryHashes":["1552397463","1669302033","3314088506","401334301","554596625","82304099"]}