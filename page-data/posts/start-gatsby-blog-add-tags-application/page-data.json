{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/start-gatsby-blog-add-tags-application","result":{"data":{"markdownRemark":{"id":"cc1554d6-054a-5655-a407-866314589ff5","html":"<h1 id=\"はじめに\" style=\"position:relative;\"><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" aria-label=\"はじめに permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>はじめに</h1>\n<p>この記事は<a href=\"https://www.gatsbyjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gatsby</a>というヘッドレスCMS技術で構成されています。今回は「エンジニア初心者でもできる」を前提に以下の構成で記事を作成していこうと思います。</p>\n<ul>\n<li><a href=\"https://tech-blog.yoshikiohashi.dev/posts/start-gatsby-blog/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gatsby始めるまで</a></li>\n<li><a href=\"https://tech-blog.yoshikiohashi.dev/posts/start-gatsby-blog-share/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GatsbyにShare機能、OGPタグをつける</a></li>\n<li><a href=\"https://tech-blog.yoshikiohashi.dev/posts/start-gatsby-blog-add-tags\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">タグ機能、カテゴリ機能をつける（基礎編）</a></li>\n<li><a href=\"https://tech-blog.yoshikiohashi.dev/posts/start-gatsby-blog-add-tags-application\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">タグ機能、カテゴリ機能をつける（応用編）</a>（本記事）</li>\n<li><a href=\"https://tech-blog.yoshikiohashi.dev/posts/start-gatsby-blog-tableofcontent\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GatsbyにTableOfContents（目次）をつける</a></li>\n<li><a href=\"https://tech-blog.yoshikiohashi.dev/posts/start-gatsby-blog-darkmode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DarkModeをつける</a></li>\n</ul>\n<h1 id=\"内容\" style=\"position:relative;\"><a href=\"#%E5%86%85%E5%AE%B9\" aria-label=\"内容 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>内容</h1>\n<p>前回はGraphQLを使用して、データを取得したJsonデータをTemplateに当てはめて画面に表示させるところまで行いました。 データの流れを理解できたでしょうか？この流れを理解するとあとは簡単です。</p>\n<p>今回は応用編です。</p>\n<p>「実際にはタグだけのページって必要でしょうか？」私は必要ないと思います。できれば、ユーザとしては選んだタグと記事の一覧が見れたら使いやすいはずです。</p>\n<p>こんなタグ一覧＋記事一覧ページを作るところをゴールに目指しましょう。</p>\n<p><img src=\"https://ucarecdn.com/698a1a04-4692-4389-8cdc-878ab2f39ed9/\"></p>\n<h2 id=\"まずはタグ一覧＋記事一覧のテンプレートファイルの作成\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%9A%E3%81%AF%E3%82%BF%E3%82%B0%E4%B8%80%E8%A6%A7%EF%BC%8B%E8%A8%98%E4%BA%8B%E4%B8%80%E8%A6%A7%E3%81%AE%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BD%9C%E6%88%90\" aria-label=\"まずはタグ一覧＋記事一覧のテンプレートファイルの作成 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まずはタグ一覧＋記事一覧のテンプレートファイルの作成</h2>\n<h3 id=\"最初にgraphqlのクエリーを完成させよう\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%88%9D%E3%81%ABgraphql%E3%81%AE%E3%82%AF%E3%82%A8%E3%83%AA%E3%83%BC%E3%82%92%E5%AE%8C%E6%88%90%E3%81%95%E3%81%9B%E3%82%88%E3%81%86\" aria-label=\"最初にgraphqlのクエリーを完成させよう permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最初にGraphQLのクエリーを完成させよう</h3>\n<p>ポイントになってくるのが<strong>query TagsListTemplate($tag: String!)</strong>と<strong>tags: { glob: $tag }</strong>のTemplateの引数の指定の仕方と使い方です。<strong>glob</strong>はglobalの略でいわゆる何でも検索ができます。*を入れたらすべてのタグが見つかるようになります。</p>\n<p>タグ一覧（<strong>/tags</strong>）では全タグを表示させたいので*が入ってきますね。</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> TagsListTemplate<span class=\"token punctuation\">(</span><span class=\"token variable\">$tag</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    allMarkdownRemark<span class=\"token punctuation\">(</span>\n        <span class=\"token attr-name\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> \n            <span class=\"token attr-name\">frontmatter</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> \n                <span class=\"token attr-name\">template</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">eq</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"post\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token attr-name\">draft</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">ne</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n                <span class=\"token attr-name\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">glob</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$tag</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token attr-name\">sort</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">order</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">DESC</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">fields</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>frontmatter___date<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        group<span class=\"token punctuation\">(</span><span class=\"token attr-name\">field</span><span class=\"token punctuation\">:</span> frontmatter___tags<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            fieldValue\n            totalCount\n        <span class=\"token punctuation\">}</span>\n        edges <span class=\"token punctuation\">{</span>\n            node <span class=\"token punctuation\">{</span>\n                fields <span class=\"token punctuation\">{</span>\n                    slug\n                    categorySlug\n                <span class=\"token punctuation\">}</span>\n                frontmatter <span class=\"token punctuation\">{</span>\n                    title\n                    date\n                    category\n                    description\n                    socialImage\n                <span class=\"token punctuation\">}</span>\n                excerpt\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>あとは、記事を取得するクエリーとタグを取得するクエリーを記述しましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">group<span class=\"token punctuation\">(</span><span class=\"token attr-name\">field</span><span class=\"token punctuation\">:</span> frontmatter___tags<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fieldValue\n    totalCount\n<span class=\"token punctuation\">}</span>\nedges <span class=\"token punctuation\">{</span>\n    node <span class=\"token punctuation\">{</span>\n        fields <span class=\"token punctuation\">{</span>\n            slug\n            categorySlug\n        <span class=\"token punctuation\">}</span>\n        frontmatter <span class=\"token punctuation\">{</span>\n            title\n            date\n            category\n            description\n            socialImage\n        <span class=\"token punctuation\">}</span>\n        excerpt\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>GraphQLを実際に <code class=\"language-text\">http://localhost:8000/___graphql</code> で試してJsonが取得できたら次へ進みましょう。</p>\n<p>次は、取得したJsonをComponentに当てはめていきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TagsListTemplate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> pageContext <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> tags <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>TagsList<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Tags tags<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>tags<span class=\"token punctuation\">}</span> selectedTag<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pageContext<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Post posts<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>posts<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token comment\">// それぞれの記事を表示するコンポーネントに合わせて差し替えてください</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    query TagsListTemplate($tag: String!) {\n        allMarkdownRemark(\n            filter: { frontmatter: { template: { eq: \"post\" }, draft: { ne: true }, tags: { glob: $tag } } },\n            sort: { order: DESC, fields: [frontmatter___date] }\n        ){\n            group(field: frontmatter___tags) {\n                fieldValue\n                totalCount\n            }\n            edges {\n                node {\n                    fields {\n                        slug\n                        categorySlug\n                    }\n                    frontmatter {\n                        title\n                        date\n                        category\n                        description\n                        socialImage\n                    }\n                    excerpt\n                }\n            }\n        }\n    }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TagsListTemplate<span class=\"token punctuation\">;</span></code></pre></div>\n<p>ここまででGraphQLクエリーでタグと記事の一覧を取得するクエリーを書き、Componentに当てはめることまでしました。次はタグのコンポーネントの作成です。</p>\n<h2 id=\"タグ一覧を表示するコンポーネントパーツの作成\" style=\"position:relative;\"><a href=\"#%E3%82%BF%E3%82%B0%E4%B8%80%E8%A6%A7%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%83%91%E3%83%BC%E3%83%84%E3%81%AE%E4%BD%9C%E6%88%90\" aria-label=\"タグ一覧を表示するコンポーネントパーツの作成 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>タグ一覧を表示するコンポーネントパーツの作成</h2>\n<p>先程作成したTemplateから呼び出されるタグコンポーネントです。こちらの例ではカウント順にソートしていますが、してもしなくてもOKです。</p>\n<p>また、引数に<code class=\"language-text\">selectedTag</code>がありますが、選択している状態を表現したかったので表示しています。好みで変更してOKです。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sortTotalCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tags</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span>tags<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'totalCount'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fieldValue'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'desc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Tags</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> tags<span class=\"token punctuation\">,</span> selectedTag <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">[</span><span class=\"token string\">\"Tags\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token function\">sortTotalCount</span><span class=\"token punctuation\">(</span>tags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>tag<span class=\"token punctuation\">.</span>fieldValue<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/tags/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">kebabCase</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">.</span>fieldValue<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span> className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>selectedTag <span class=\"token operator\">===</span> tag<span class=\"token punctuation\">.</span>fieldValue <span class=\"token operator\">?</span> styles<span class=\"token punctuation\">[</span><span class=\"token string\">'Tags--Selected'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>tag<span class=\"token punctuation\">.</span>fieldValue<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>tag<span class=\"token punctuation\">.</span>totalCount<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Tags<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"gatsby-nodejs-に-tags-と-tagstags-のルーティングを作成する\" style=\"position:relative;\"><a href=\"#gatsby-nodejs-%E3%81%AB-tags-%E3%81%A8-tagstags-%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\" aria-label=\"gatsby nodejs に tags と tagstags のルーティングを作成する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gatsby-node.js に <strong>/tags/</strong> と <strong>/tags/{tags}</strong> のルーティングを作成する</h2>\n<p><strong>gatsby-node.js</strong></p>\n<p>まずはタグ一覧ページを登録します。</p>\n<p>すべてのタグを表示するのでcontextに<strong>{ tag: ”*” }</strong>を指定しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token comment\">// Tags list</span>\n  <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'/tags'</span><span class=\"token punctuation\">,</span>\n    component<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./src/templates/tags-list-template.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    context<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> tag<span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>タグが選ばれた場合のURLを登録していきます。</p>\n<p>ポイントはcontextの<strong>{ tag: tag.fieldValue }</strong>を指定している箇所です。これでURLが<strong>/tags/{tags}</strong>だったときにタグ名がTemplateに引数として受け渡しされることになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    {\n      allMarkdownRemark(\n        filter: { frontmatter: { template: { eq: \"post\" }, draft: { ne: true } } }\n      ) {\n        group(field: frontmatter___tags) {\n          fieldValue\n          totalCount\n        }\n      }\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  _<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tag</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> numPages <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">.</span>totalCount <span class=\"token operator\">/</span> postsPerPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> tagSlug <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/tags/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">kebabCase</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">.</span>fieldValue<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numPages<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        path<span class=\"token operator\">:</span> i <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> tagSlug <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tagSlug<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/page/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        component<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./src/templates/tags-list-template.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        context<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          tag<span class=\"token operator\">:</span> tag<span class=\"token punctuation\">.</span>fieldValue\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>処理の流れを表すとこのような図になります。</p>\n<p><img src=\"https://ucarecdn.com/bc8da85e-697a-4b9a-8b33-b10ebf5349df/\"></p>\n<h2 id=\"gatsby-build-を再度実行\" style=\"position:relative;\"><a href=\"#gatsby-build-%E3%82%92%E5%86%8D%E5%BA%A6%E5%AE%9F%E8%A1%8C\" aria-label=\"gatsby build を再度実行 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gatsby build を再度実行</h2>\n<p><strong>/tags</strong> のページに遷移してみましょう。タグ一覧とその記事が表示されましたか？</p>\n<h1 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h1>\n<p>いかがだったでしょうか？うまく設定できたでしょうか？ここまで理解できたら他の実装にも応用できますね。それでは次回の記事で。</p>","fields":{"slug":"/posts/start-gatsby-blog-add-tags-application","tagSlugs":["/tags/gatsby/","/tags/cms/","/tags/tags/","/tags/graph-ql/"]},"frontmatter":{"date":"2020-05-27T14:14:23.709Z","updatedDate":null,"tags":["Gatsby","CMS","Tags","GraphQL"],"title":"タグ機能、カテゴリ機能をつける（応用編）","socialImage":"https://ucarecdn.com/20424b28-4152-4bd1-b029-93ea501b14d3/","category":"Programming"},"excerpt":"はじめに この記事はGatsbyというヘッドレスCMS技術で構成されています。今回は「エンジニア初心者でもできる」を前提に以下の構成で記事を作成していこうと思います。 Gatsby始めるまで GatsbyにShare機能、OGPタグをつける タグ機能、カテゴリ機能をつける（基礎…","tableOfContents":"<ul>\n<li><a href=\"/posts/start-gatsby-blog-add-tags-application/#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\">はじめに</a></li>\n<li>\n<p><a href=\"/posts/start-gatsby-blog-add-tags-application/#%E5%86%85%E5%AE%B9\">内容</a></p>\n<ul>\n<li>\n<p><a href=\"/posts/start-gatsby-blog-add-tags-application/#%E3%81%BE%E3%81%9A%E3%81%AF%E3%82%BF%E3%82%B0%E4%B8%80%E8%A6%A7%EF%BC%8B%E8%A8%98%E4%BA%8B%E4%B8%80%E8%A6%A7%E3%81%AE%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BD%9C%E6%88%90\">まずはタグ一覧＋記事一覧のテンプレートファイルの作成</a></p>\n<ul>\n<li><a href=\"/posts/start-gatsby-blog-add-tags-application/#%E6%9C%80%E5%88%9D%E3%81%ABgraphql%E3%81%AE%E3%82%AF%E3%82%A8%E3%83%AA%E3%83%BC%E3%82%92%E5%AE%8C%E6%88%90%E3%81%95%E3%81%9B%E3%82%88%E3%81%86\">最初にGraphQLのクエリーを完成させよう</a></li>\n</ul>\n</li>\n<li><a href=\"/posts/start-gatsby-blog-add-tags-application/#%E3%82%BF%E3%82%B0%E4%B8%80%E8%A6%A7%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%83%91%E3%83%BC%E3%83%84%E3%81%AE%E4%BD%9C%E6%88%90\">タグ一覧を表示するコンポーネントパーツの作成</a></li>\n<li><a href=\"/posts/start-gatsby-blog-add-tags-application/#gatsby-nodejs-%E3%81%AB-tags-%E3%81%A8-tagstags-%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">gatsby-node.js に <strong>/tags/</strong> と <strong>/tags/{tags}</strong> のルーティングを作成する</a></li>\n<li><a href=\"/posts/start-gatsby-blog-add-tags-application/#gatsby-build-%E3%82%92%E5%86%8D%E5%BA%A6%E5%AE%9F%E8%A1%8C\">gatsby build を再度実行</a></li>\n</ul>\n</li>\n<li><a href=\"/posts/start-gatsby-blog-add-tags-application/#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n</ul>"}},"pageContext":{"slug":"/posts/start-gatsby-blog-add-tags-application"}},"staticQueryHashes":["1552397463","1669302033","3314088506","401334301","554596625","82304099"]}