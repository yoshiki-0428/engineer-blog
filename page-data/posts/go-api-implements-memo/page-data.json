{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/go-api-implements-memo","result":{"data":{"markdownRemark":{"id":"690d359e-dfc6-533a-988b-99fd8c75bf06","html":"<h1 id=\"バイナリーテキストを型変換する（参照渡しで）\" style=\"position:relative;\"><a href=\"#%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%83%BC%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%82%92%E5%9E%8B%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B%EF%BC%88%E5%8F%82%E7%85%A7%E6%B8%A1%E3%81%97%E3%81%A7%EF%BC%89\" aria-label=\"バイナリーテキストを型変換する（参照渡しで） permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>バイナリーテキストを型変換する（参照渡しで）</h1>\n<p>GoはGenericsがないので返却値に不明の型を指定することはできません。</p>\n<p>なので参照渡しで型を作成しておいて、メソッドの中で変換します。（返せるのは<strong>interface{}のみ</strong>）</p>\n<p>変換失敗した場合はエラーが帰ります。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"github.com/mitchellh/mapstructure\"</span>\n\t<span class=\"token string\">\"github.com/tidwall/gjson\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">mapStringsStruct</span><span class=\"token punctuation\">(</span>strs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> st <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\tstr <span class=\"token operator\">:=</span> <span class=\"token string\">\"[\"</span> <span class=\"token operator\">+</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">,</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">mapJsonStruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">mapStringStruct</span><span class=\"token punctuation\">(</span>str <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> st <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">mapJsonStruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">mapJsonStruct</span><span class=\"token punctuation\">(</span>byts <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> st <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\ttmp <span class=\"token operator\">:=</span> gjson<span class=\"token punctuation\">.</span><span class=\"token function\">ParseBytes</span><span class=\"token punctuation\">(</span>byts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tconfig <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>mapstructure<span class=\"token punctuation\">.</span>DecoderConfig<span class=\"token punctuation\">{</span>\n\t\tTagName<span class=\"token punctuation\">:</span>  <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n\t\tResult<span class=\"token punctuation\">:</span>   st<span class=\"token punctuation\">,</span>\n\t\tMetadata<span class=\"token punctuation\">:</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\tdecoder<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> mapstructure<span class=\"token punctuation\">.</span><span class=\"token function\">NewDecoder</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> decoder<span class=\"token punctuation\">.</span><span class=\"token function\">Decode</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"goでのdockerfileの作り方\" style=\"position:relative;\"><a href=\"#go%E3%81%A7%E3%81%AEdockerfile%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9\" aria-label=\"goでのdockerfileの作り方 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GoでのDockerfileの作り方</h1>\n<p>Goでは実行バイナリファイルを<strong>go build -o hogefile</strong> で簡単に作成できるのでマルチステージビルドで作成して次のステップに渡すのがおすすめです。</p>\n<ol>\n<li>(例では) <a href=\"https://future-architect.github.io/articles/20191008/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OpenAPI</a> のビルドをしてGoの自動生成ファイルを作成</li>\n<li>自動生成されたGoのファイルを渡し、go buildしバイナリファイルを渡す</li>\n<li>バイナリファイルを<strong>軽いalpine</strong>Linuxイメージに乗せて実行コマンドを設定する</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># OpenAPIでのGenerateが必要な場合、不要であれば省いてOK</span>\n<span class=\"token keyword\">FROM</span> openapitools/openapi<span class=\"token punctuation\">-</span>generator<span class=\"token punctuation\">-</span>cli AS openapi\n<span class=\"token keyword\">ADD</span> . /app\n<span class=\"token keyword\">WORKDIR</span> /app\n<span class=\"token keyword\">RUN</span> generate <span class=\"token punctuation\">-</span>i /api.openapi.yaml <span class=\"token punctuation\">-</span>g go <span class=\"token punctuation\">-</span>o .\n\n<span class=\"token keyword\">FROM</span> golang<span class=\"token punctuation\">:</span>1.14 AS build\n<span class=\"token keyword\">WORKDIR</span> /go/src\n<span class=\"token keyword\">COPY</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>from=openapi /app /go/src\n<span class=\"token comment\"># OpenAPI Generateがなければ以下を使用する</span>\n<span class=\"token comment\"># COPY . /go/src</span>\n<span class=\"token keyword\">RUN</span> CGO_ENABLED=0 go build <span class=\"token punctuation\">-</span>o server\n\n<span class=\"token keyword\">FROM</span> alpine<span class=\"token punctuation\">:</span>3.12.0 AS runtime\n<span class=\"token keyword\">WORKDIR</span> /api\n<span class=\"token keyword\">COPY</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>from=build /go/src /api\n<span class=\"token keyword\">EXPOSE</span> 8080/tcp\n<span class=\"token keyword\">ENTRYPOINT</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./server\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"dockerfile確認用-dockerコマンド\" style=\"position:relative;\"><a href=\"#dockerfile%E7%A2%BA%E8%AA%8D%E7%94%A8-docker%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89\" aria-label=\"dockerfile確認用 dockerコマンド permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dockerfile確認用 dockerコマンド</h2>\n<p>適当なgoの確認用ファイルを作る</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>dockerコマンドで確認する</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker build -t go-docker-test:latest <span class=\"token builtin class-name\">.</span>\ndocker container run -it go-docker-test:latest</code></pre></div>\n<p><strong>hello world</strong>が表示されたら成功です。</p>\n<p>閲覧いただきありがとうございます。お疲れ様でした！</p>","fields":{"slug":"/posts/go-api-implements-memo","tagSlugs":["/tags/go/","/tags/open-api/","/tags/実装メモ/","/tags/docker/"]},"frontmatter":{"date":"2020-08-22T09:00:00.000Z","updatedDate":null,"tags":["Go","OpenAPI","実装メモ","docker"],"title":"Go APIの実装をしたのでそのときのメモを残しておく","socialImage":"https://ucarecdn.com/21a05126-b63d-4da6-93c6-a25c33392c66/","category":"Programming"},"excerpt":"バイナリーテキストを型変換する（参照渡しで） GoはGenericsがないので返却値に不明の型を指定することはできません。 なので参照渡しで型を作成しておいて、メソッドの中で変換します。（返せるのはinterface{}のみ） 変換失敗した場合はエラーが帰ります。 GoでのDo…","tableOfContents":"<ul>\n<li><a href=\"/posts/go-api-implements-memo/#%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%83%BC%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%82%92%E5%9E%8B%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B%EF%BC%88%E5%8F%82%E7%85%A7%E6%B8%A1%E3%81%97%E3%81%A7%EF%BC%89\">バイナリーテキストを型変換する（参照渡しで）</a></li>\n<li>\n<p><a href=\"/posts/go-api-implements-memo/#go%E3%81%A7%E3%81%AEdockerfile%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9\">GoでのDockerfileの作り方</a></p>\n<ul>\n<li><a href=\"/posts/go-api-implements-memo/#dockerfile%E7%A2%BA%E8%AA%8D%E7%94%A8-docker%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89\">Dockerfile確認用 dockerコマンド</a></li>\n</ul>\n</li>\n</ul>"}},"pageContext":{"slug":"/posts/go-api-implements-memo"}},"staticQueryHashes":["1552397463","1669302033","3314088506","401334301","554596625","82304099"]}