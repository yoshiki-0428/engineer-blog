{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/dl-implementation-list","result":{"data":{"markdownRemark":{"id":"c834e23f-50fb-5998-b3b9-8ce8c3a0f982","html":"<h2 id=\"はじめに\" style=\"position:relative;\"><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" aria-label=\"はじめに permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>はじめに</h2>\n<p>この記事はファイルをDLするための実装をAPI（Spring）からフロントまでを説明する記事になります。</p>\n<p>前提としてAPIとフロントが分かれたアーキテクチャでの実装となります。</p>\n<h2 id=\"データの形式\" style=\"position:relative;\"><a href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E5%BD%A2%E5%BC%8F\" aria-label=\"データの形式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>データの形式</h2>\n<p>ファイル自体の形式も様々です。ここではよく使われるファイルの形式をあげていきます。</p>\n<p>他にもありますが、有名所として <strong>Blob</strong> と <strong>Base64</strong> が使われています。</p>\n<h3 id=\"blob\" style=\"position:relative;\"><a href=\"#blob\" aria-label=\"blob permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Blob</h3>\n<p>Binary Large OBjectの略。データベースへの格納形式でよく使われる。画像や音声、その他のマルチメディアオブジェクトがBLOBとして格納される。</p>\n<h3 id=\"base64\" style=\"position:relative;\"><a href=\"#base64\" aria-label=\"base64 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Base64</h3>\n<p>Base64は、データを64種類の印字可能な英数字のみを用いて、それ以外の文字を扱うことの出来ない通信環境にてマルチバイト文字やバイナリデータを扱うためのエンコード方式。</p>\n<p>一番よく聞く形式ではないでしょうか。ブラウザやデバイスによって受け取れない文字列がある場合にBase64にして互換性を保つために使われているそうです。ただし、デメリットはデータ量が約33%増えるため通信量が増えてしまうようです。</p>\n<h2 id=\"apiの実装\" style=\"position:relative;\"><a href=\"#api%E3%81%AE%E5%AE%9F%E8%A3%85\" aria-label=\"apiの実装 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>APIの実装</h2>\n<p>API側としてはファイルの形式は決まっているのか、複数ファイルであればZip化するのか、結構キメの問題が多いです。画像DL APIなのか、ZipファイルDL APIなのかで変わってきます。</p>\n<p>返す要素が決まっていない場合は Headerを<strong>octet-stream</strong>にしてあげればよしなに変えてくれます（あまり推奨はしない）</p>\n<ul>\n<li>Resourceを返す場合（Spring）</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// リソースファイルを読み込み</span>\n<span class=\"token class-name\">Resource</span> resource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResourceLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/static/image/test.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> resource<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>Byte配列で返却する場合（Spring）</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Resource</span> resource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResourceLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/static/image/test.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">InputStream</span> image <span class=\"token operator\">=</span> resource<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n<span class=\"token comment\">// byteへ変換</span>\n<span class=\"token keyword\">return</span> <span class=\"token class-name\">IOUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>Zip形式で返却する場合（Spring）</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Resource</span><span class=\"token punctuation\">></span></span> resources <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresources<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ResourceLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/static/image/test.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresources<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ResourceLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/static/image/test2.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ByteArrayOutputStream</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ZipOutputStream</span> zipOut <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZipOutputStream</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Resource</span> res <span class=\"token operator\">:</span> resources<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    zipOut<span class=\"token punctuation\">.</span><span class=\"token function\">putNextEntry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ZipEntry</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">getFilename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    zipOut<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    zipOut<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    zipOut<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    data<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayResource</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>DL APIの実装で忘れてはいけないのが、<strong>content-disposition</strong> Headerの設定です。いわゆるファイル名になります。</p>\n<p>フロント（JS）から<strong>content-disposition</strong> Headerを読み取れるようにするために<strong>Access-Control-Expose-Headers</strong>を設定する必要があります。</p>\n<p>ファイル名をつけて返してあげましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">headers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpHeaders</span><span class=\"token punctuation\">.</span>ACCESS_CONTROL_EXPOSE_HEADERS<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpHeaders</span><span class=\"token punctuation\">.</span>CONTENT_DISPOSITION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nheaders<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpHeaders</span><span class=\"token punctuation\">.</span>CONTENT_DISPOSITION<span class=\"token punctuation\">,</span> <span class=\"token string\">\"attachment; filename='YYYYMMDD-test.zip'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"frontの実装\" style=\"position:relative;\"><a href=\"#front%E3%81%AE%E5%AE%9F%E8%A3%85\" aria-label=\"frontの実装 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Frontの実装</h2>\n<p>Frontの実装の流れは、APIをコールして、そのレスポンスをダウンロード属性のある<strong>aタグ</strong>に差し込んで擬似的にクリックしてDLするといった少し面倒な手順なのですが、<a href=\"https://github.com/eligrey/FileSaver.js#readme\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fileSaverというライブラリ</a>を使うことで簡単に実現できます。</p>\n<p>以下サンプルコードです。TypeScriptで書かれていますが、なんとなくで読み取っていただけるとw</p>\n<p>コード的にはHeaderの<strong>content-disposition</strong>に含まれている値を正規表現で取り出しファイル名を<strong>file-saver</strong>に渡しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> getFileNameFromHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>content<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> defaultName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'download'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">filename=[\"'`](\\S*?)[\"'`]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> defaultName<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> regex<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> defaultName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\naxios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/download'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n         <span class=\"token function\">saveAs</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> <span class=\"token function\">getFileNameFromHeader</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'content-disposition'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'download.zip'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"おわりに\" style=\"position:relative;\"><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\" aria-label=\"おわりに permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>おわりに</h2>\n<p>半分備忘録ですが、また実装するときにお世話になると思います。参考にできる部分は参考にどうぞ</p>\n<p>それでは</p>\n<h3 id=\"参考url\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83url\" aria-label=\"参考url permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考URL</h3>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/48463690/get-content-disposition-header-of-a-request-with-axios\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">StackOverFlow</a></li>\n<li><a href=\"https://regex101.com/r/hJ7tS6/1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Regex Sample</a></li>\n</ul>","fields":{"slug":"/posts/dl-implementation-list","tagSlugs":["/tags/dl実装/","/tags/axios/","/tags/java/"]},"frontmatter":{"date":"2020-07-17T09:00:00.000Z","updatedDate":null,"tags":["DL実装","axios","Java"],"title":"DL実装するときに理解すること","socialImage":"https://ucarecdn.com/c888768a-1a82-40ed-8e22-90ba29c5e962/","category":"Programming"},"excerpt":"はじめに この記事はファイルをDLするための実装をAPI（Spring）からフロントまでを説明する記事になります。 前提としてAPIとフロントが分かれたアーキテクチャでの実装となります。 データの形式 ファイル自体の形式も様々です。ここではよく使われるファイルの形式をあげていき…","tableOfContents":"<ul>\n<li><a href=\"/posts/dl-implementation-list/#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\">はじめに</a></li>\n<li>\n<p><a href=\"/posts/dl-implementation-list/#%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E5%BD%A2%E5%BC%8F\">データの形式</a></p>\n<ul>\n<li><a href=\"/posts/dl-implementation-list/#blob\">Blob</a></li>\n<li><a href=\"/posts/dl-implementation-list/#base64\">Base64</a></li>\n</ul>\n</li>\n<li><a href=\"/posts/dl-implementation-list/#api%E3%81%AE%E5%AE%9F%E8%A3%85\">APIの実装</a></li>\n<li><a href=\"/posts/dl-implementation-list/#front%E3%81%AE%E5%AE%9F%E8%A3%85\">Frontの実装</a></li>\n<li>\n<p><a href=\"/posts/dl-implementation-list/#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\">おわりに</a></p>\n<ul>\n<li><a href=\"/posts/dl-implementation-list/#%E5%8F%82%E8%80%83url\">参考URL</a></li>\n</ul>\n</li>\n</ul>"}},"pageContext":{"slug":"/posts/dl-implementation-list"}},"staticQueryHashes":["1552397463","1669302033","3314088506","401334301","554596625","82304099"]}