{"version":3,"sources":["webpack:///./src/components/Feed/index.js","webpack:///./src/templates/categories-list-template.js","webpack:///./src/components/Page/index.js"],"names":["Feed","edges","map","edge","key","node","fields","slug","dateTime","format","Date","frontmatter","date","YYYY_MM_DD","updatedDate","to","title","categorySlug","category","size","item","socialImage","excerpt","tags","t","fieldValue","urlPrefix","query","CategoriesListTemplate","data","pageContext","useSiteMetadata","subtitle","allMarkdownRemark","pageTitle","mainPage","content","side","main","description","Page","footerContent","Body"],"mappings":"6FAAA,6GAyDeA,IA3CF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACP,uBACGA,EAAMC,KAAI,SAACC,GAAD,OACP,YAAC,IAAD,CAAMC,IAAKD,EAAKE,KAAKC,OAAOC,MAC1B,YAAC,IAAD,KACE,YAAC,IAAD,KACE,oBAAMC,SAAUC,YAAO,IAAIC,KAAKP,EAAKE,KAAKM,YAAYC,MAAOC,MAC1DJ,YAAO,IAAIC,KAAKP,EAAKE,KAAKM,YAAYC,MAAOC,MAE/CV,EAAKE,KAAKM,YAAYG,aACnB,uCACE,oBACEN,SACEC,YAAO,IAAIC,KAAKP,EAAKE,KAAKM,YAAYG,aAAcD,MACrDJ,YAAO,IAAIC,KAAKP,EAAKE,KAAKM,YAAYG,aAAcD,MAJzD,MAUN,YAAC,IAAD,CAAqBE,GAAIZ,EAAKE,KAAKC,OAAOC,MACvCJ,EAAKE,KAAKM,YAAYK,OAGzB,YAAC,IAAD,CAAkBD,GAAIZ,EAAKE,KAAKC,OAAOW,cACpCd,EAAKE,KAAKM,YAAYO,WAG3B,YAAC,OAAD,CAAMH,GAAIZ,EAAKE,KAAKC,OAAOC,MACzB,YAAC,IAAD,CACIY,KAAM,SACNC,KAAM,CAAEC,YAAalB,EAAKE,KAAKM,YAAYU,gBAEjD,YAAC,IAAD,KACE,YAAC,IAAD,KAAmBlB,EAAKE,KAAKiB,SAC7B,YAAC,IAAD,CAAeP,GAAIZ,EAAKE,KAAKC,OAAOC,MAApC,aACA,YAAC,IAAD,CAAMgB,KAAMpB,EAAKE,KAAKM,YAAYY,KAAKrB,KAAI,SAACsB,GAAD,MAAQ,CAAEC,WAAYD,MAAOE,UAAW,iB,kCClDnG,mIA2BaC,EAAK,aA8BHC,UAjDgB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAAkB,EAC5BC,cAApBf,EADgD,EAChDA,MAAOgB,EADyC,EACzCA,SACP/B,EAAU4B,EAAKI,kBAAfhC,MAEFiC,EAAqC,MAAzBJ,EAAYZ,SAAmB,GAAQY,EAAYZ,SAAnD,WACZiB,EACJ,YAAC,IAAD,CAAMnB,MAAOkB,EAAWE,QACtB,YAAC,IAAD,CAAMnC,MAAOA,MAKXoC,EAAO,YAAC,IAAD,MAEb,OACE,YAAC,IAAD,CAAQC,KAAMH,EAAUE,KAAMA,EAAMrB,MAAK,gBAAkBA,EAASuB,YAAaP,M,+FCEtEQ,IArBF,SAAC,GAAuC,IAArCxB,EAAoC,EAApCA,MAAOoB,EAA6B,EAA7BA,QAASK,EAAoB,EAApBA,cACxBC,EAAI,sHACV,OACI,8BACG1B,GACC,8BACE,YAAC,IAAD,KAAWA,GACX,YAAC,IAAD,OAIJ,YAAC0B,EAAD,KACGN,GAEH,uBACGK","file":"component---src-templates-categories-list-template-js-f167b68ef7c45547ef61.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport { format } from 'date-fns';\nimport Tags from '../Tags';\nimport ImageWrap from '../Image/ImageWrap';\nimport {\n  BUTTON_CENTER, CARD,\n  SPACER,\n  TEXT_BASE_CENTER,\n  TEXT_GATSBY_LINK,\n  TEXT_GATSBY_LINK_H1,\n} from '../Tailwind';\nimport { YYYY_MM_DD } from '../../constants/dateFormat';\n\nconst Feed = ({ edges }) => (\n      <div>\n        {edges.map((edge) => (\n            <CARD key={edge.node.fields.slug}>\n              <SPACER>\n                <TEXT_BASE_CENTER>\n                  <time dateTime={format(new Date(edge.node.frontmatter.date), YYYY_MM_DD)}>\n                    {format(new Date(edge.node.frontmatter.date), YYYY_MM_DD)}\n                  </time>\n                  {edge.node.frontmatter.updatedDate && (\n                      <> (更新日:\n                        <time\n                          dateTime={\n                            format(new Date(edge.node.frontmatter.updatedDate), YYYY_MM_DD)}>\n                          {format(new Date(edge.node.frontmatter.updatedDate), YYYY_MM_DD)}\n                        </time>\n                        )\n                      </>\n                  )}\n                </TEXT_BASE_CENTER>\n                <TEXT_GATSBY_LINK_H1 to={edge.node.fields.slug}>\n                  {edge.node.frontmatter.title}\n                </TEXT_GATSBY_LINK_H1>\n\n                <TEXT_GATSBY_LINK to={edge.node.fields.categorySlug}>\n                  {edge.node.frontmatter.category}\n                </TEXT_GATSBY_LINK>\n              </SPACER>\n              <Link to={edge.node.fields.slug}>\n                <ImageWrap\n                    size={'normal'}\n                    item={{ socialImage: edge.node.frontmatter.socialImage }} />\n              </Link>\n              <SPACER>\n                <TEXT_BASE_CENTER>{edge.node.excerpt}</TEXT_BASE_CENTER>\n                <BUTTON_CENTER to={edge.node.fields.slug}>READ MORE</BUTTON_CENTER>\n                <Tags tags={edge.node.frontmatter.tags.map((t) => ({ fieldValue: t }))} urlPrefix={'tags'}/>\n              </SPACER>\n            </CARD>\n        ))}\n      </div>\n);\n\nexport default Feed;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { useSiteMetadata } from '../hooks';\nimport Sidebar from '../components/Sidebar';\nimport Layout from '../components/Layout';\nimport Page from '../components/Page';\nimport Feed from '../components/Feed';\n\nconst CategoriesListTemplate = ({ data, pageContext }) => {\n  const { title, subtitle } = useSiteMetadata();\n  const { edges } = data.allMarkdownRemark;\n\n  const pageTitle = pageContext.category === '*' ? '' : `${pageContext.category}に関する記事一覧`;\n  const mainPage = (\n    <Page title={pageTitle} content={(\n      <Feed edges={edges} />\n    )}>\n    </Page>\n  );\n\n  const side = <Sidebar/>;\n\n  return (\n    <Layout main={mainPage} side={side} title={`Categories - ${title}`} description={subtitle}/>\n  );\n};\n\nexport const query = graphql`\n    query CategoriesListTemplate($category: String!) {\n        allMarkdownRemark(\n            filter: { frontmatter: { template: { eq: \"post\" }, draft: { ne: true }, category: { glob: $category } } },\n            sort: { order: DESC, fields: [frontmatter___date] }\n        ){\n            group(field: frontmatter___tags) {\n                fieldValue\n                totalCount\n            }\n            edges {\n                node {\n                    fields {\n                        slug\n                        categorySlug\n                    }\n                    frontmatter {\n                        title\n                        date\n                        category\n                        socialImage\n                        tags\n                    }\n                    excerpt(truncate: true)\n                }\n            }\n        }\n    }\n`;\n\nexport default CategoriesListTemplate;\n","import React from 'react';\nimport tw from 'twin.macro';\nimport { HR, TITLE_H1 } from '../Tailwind';\n\nconst Page = ({ title, content, footerContent }) => {\n  const Body = tw.div`text-base flex justify-center`;\n  return (\n      <>\n        {title && (\n          <>\n            <TITLE_H1>{title}</TITLE_H1>\n            <HR/>\n          </>\n        )}\n\n        <Body>\n          {content}\n        </Body>\n        <div>\n          {footerContent}\n        </div>\n      </>\n  );\n};\n\nexport default Page;\n"],"sourceRoot":""}